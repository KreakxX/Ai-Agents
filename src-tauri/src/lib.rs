use base64::{decode, encode};
use std::process::Command;
use tauri::async_runtime::spawn_blocking;
use tauri_plugin_store::Builder;

#[tauri::command]
fn greet(name: &str) -> String {
    format!("Hello, {}! You've been greeted from Rust!", name)
}

#[tauri::command]
async fn generate_image(prompt: String) -> Result<String, String> {
    let result = spawn_blocking(move || {
        let output = Command::new("python3")
            .arg("inference.py")
            .arg("image") // Funktion spezifizieren
            .arg(&prompt)
            .output()
            .map_err(|e| format!("Failed to execute Python script: {}", e))?;

        if !output.status.success() {
            let error_msg = String::from_utf8_lossy(&output.stderr);
            return Err(format!("Python script failed: {}", error_msg));
        }

        let filename = String::from_utf8(output.stdout)
            .map_err(|e| format!("Failed to parse output: {}", e))?
            .trim()
            .to_string();

        if filename.is_empty() {
            return Err("No filename returned from Python script".to_string());
        }

        Ok(filename)
    })
    .await;

    // Handle the result from the background thread
    result.unwrap_or_else(|e| Err(format!("Thread join error: {}", e)))
}

#[tauri::command]
async fn generate_audio(text: String, speaker: String, language: String) -> Result<String, String> {
    let result = spawn_blocking(move || {
        let output = Command::new("python3")
            .arg("inference.py")
            .arg("audio") // Funktion spezifizieren
            .arg(&text)
            .arg(&speaker)
            .arg(&language)
            .output()
            .map_err(|e| format!("Failed to execute Python script: {}", e))?;

        if !output.status.success() {
            let error_msg = String::from_utf8_lossy(&output.stderr);
            return Err(format!("Python script failed: {}", error_msg));
        }

        let filename = String::from_utf8(output.stdout)
            .map_err(|e| format!("Failed to parse output: {}", e))?
            .trim()
            .to_string();

        if filename.is_empty() {
            return Err("No filename returned from Python script".to_string());
        }

        Ok(filename)
    })
    .await;

    // Handle the result from the background thread
    result.unwrap_or_else(|e| Err(format!("Thread join error: {}", e)))
}

#[tauri::command]
async fn generate_text(prompt: String, model_name: String) -> Result<String, String> {
    let result = spawn_blocking(move || {
        let output = Command::new("python3")
            .arg("inference.py")
            .arg("text")
            .arg(&prompt)
            .arg(&model_name)
            .output()
            .map_err(|e| format!("Failed to execute Python script: {}", e))?;

        if !output.status.success() {
            let error_msg = String::from_utf8_lossy(&output.stderr);
            return Err(format!("Python script failed: {}", error_msg));
        }

        let generated_text = String::from_utf8(output.stdout)
            .map_err(|e| format!("Failed to parse output: {}", e))?
            .trim()
            .to_string();

        if generated_text.is_empty() {
            return Err("No text generated by Python script".to_string());
        }

        Ok(generated_text)
    })
    .await;

    // Handle the result from the background thread
    result.unwrap_or_else(|e| Err(format!("Thread join error: {}", e)))
}

#[tauri::command]
fn pdf_to_png(pdf_base64: String) -> Result<String, String> {
    let pdf_bytes = decode(pdf_base64).map_err(|e| format!("Failed to decode base64: {}", e))?;

    use pdfium_render::prelude::*;
    let pdfium = Pdfium::new(Pdfium::bind_to_system_library().map_err(|e| e.to_string())?);
    let doc = pdfium
        .load_pdf_from_byte_vec(pdf_bytes, None)
        .map_err(|e| e.to_string())?;
    let page = doc.pages().get(0).map_err(|_| "No pages in PDF")?;

    // Render to bitmap and get raw bytes directly
    let bitmap = page
        .render_with_config(&PdfRenderConfig::new().set_target_width(512))
        .map_err(|e| e.to_string())?;

    // Get raw RGBA bytes from the bitmap
    let width = bitmap.width() as u32;
    let height = bitmap.height() as u32;
    let raw_bytes = bitmap.as_bytes(); // noch durch die Pages durch iterieren und dann mehrer Pictures machen

    // Create a new image from raw bytes using your project's image crate
    let img = image::RgbaImage::from_raw(width, height, raw_bytes.to_vec())
        .ok_or("Failed to create image from raw bytes")?;

    let dynamic_img = image::DynamicImage::ImageRgba8(img);

    let mut buf = Vec::new();
    dynamic_img
        .write_to(&mut std::io::Cursor::new(&mut buf), image::ImageFormat::Png)
        .map_err(|e| e.to_string())?;

    // Convert the PNG bytes to base64 string
    Ok(base64::encode(buf))
}
#[cfg_attr(mobile, tauri::mobile_entry_point)]
pub fn run() {
    tauri::Builder::default()
        .plugin(tauri_plugin_opener::init())
        .plugin(tauri_plugin_http::init())
        .plugin(tauri_plugin_fs::init())
        .plugin(tauri_plugin_dialog::init())
        .plugin(tauri_plugin_store::Builder::default().build())
        .invoke_handler(tauri::generate_handler![
            greet,
            generate_image,
            generate_audio,
            generate_text,
            pdf_to_png
        ])
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}
